import groovy.io.FileType

buildscript {
  repositories {
    mavenLocal()
    maven {
      url 'https://plugins.gradle.org/m2/'
    }
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath "gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.2"
  }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'signing'
apply plugin: 'com.github.sherter.google-java-format'

group = "com.google.api"
archivesBaseName = "api-common"

project.version = new File("version.txt").text.trim()

sourceCompatibility = 1.7
targetCompatibility = 1.7

// Dependencies
// ------------

ext {

  // Shortcuts for libraries we are using
  libraries = [
      guava: 'com.google.guava:guava:19.0',
      jsr305: 'com.google.code.findbugs:jsr305:3.0.0',
      autovalue: 'com.google.auto.value:auto-value:1.1',
      joda: 'joda-time:joda-time:2.8.2',

      // Testing
      junit: 'junit:junit:4.11',
      mockito: 'org.mockito:mockito-core:1.10.19',
      truth: 'com.google.truth:truth:0.27',
      commons: 'org.apache.commons:commons-lang3:3.4',

      // Formatter
      javaFomatter: 'com.google.googlejavaformat:google-java-format:0.1-alpha'
  ]
}

repositories {
  mavenLocal()
  mavenCentral()
}

dependencies {
  compile libraries.guava,
    libraries.jsr305,
    libraries.autovalue,
    libraries.joda

  testCompile libraries.junit,
    libraries.mockito,
    libraries.truth,
    libraries.commons
}

clean.doFirst {
  delete 'tmp_gh-pages/'
}

jacocoTestReport {
  reports {
    xml.enabled true
    html.enabled true
  }
}

check.dependsOn jacocoTestReport

// Source jar
// ----------

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

// JavaDoc
// -------

task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}

javadoc.options {
  encoding = 'UTF-8'
  links 'https://docs.oracle.com/javase/7/docs/api/'
}

// Test Logging
// ------------

test {
  testLogging {
    events "passed", "skipped", "failed", "standardOut", "standardError"
    exceptionFormat = 'full'
  }
}


// Eclipse Annotation Processing
// -----------------------------

ext {
  eclipseAptFolder = '.apt_generated'
  eclipseSettingsDir = file('.settings')
}

configurations {
  codeGeneration
}

dependencies {
  codeGeneration libraries.autovalue, libraries.jsr305
  compile libraries.autovalue, libraries.jsr305
}

compileJava.classpath += configurations.codeGeneration

eclipse {
  jdt.file.withProperties {
    it['org.eclipse.jdt.core.compiler.processAnnotations'] = 'enabled'
  }
}

tasks.eclipseJdt {
  doFirst {
    def aptPrefs =
        file("${eclipseSettingsDir}/org.eclipse.jdt.apt.core.prefs")
    aptPrefs.parentFile.mkdirs()

    aptPrefs.text = """\
        eclipse.preferences.version=1
        org.eclipse.jdt.apt.aptEnabled=true
        org.eclipse.jdt.apt.genSrcDir=${eclipseAptFolder}
        org.eclipse.jdt.apt.reconcileEnabled=true
        """.stripIndent()

    file('.factorypath').withWriter {
      new groovy.xml.MarkupBuilder(it).'factorypath' {
        project.configurations.codeGeneration.each { dep->
          factorypathentry(
            kind:'EXTJAR',
            id:dep.absolutePath,
            enabled:true,
            runInBatchMode:false)
        }
      }
    }
  }
}

tasks.cleanEclipseJdt {
  doFirst {
    delete file("${eclipseSettingsDir}/org.eclipse.jdt.apt.core.prefs"),
      file('.factorypath')
  }
}

// Publishing
// ----------

artifacts {
  archives javadocJar, sourcesJar
}

signing {
  required { gradle.taskGraph.hasTask("uploadArchives") }
  sign configurations.archives
}

if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
          authentication(userName: ossrhUsername, password: ossrhPassword)
        }

        pom.project {
          name 'API Common'
          packaging 'jar'
          artifactId 'api-common'
          description 'Common utilities for Google APIs in Java'
          url 'https://github.com/googleapis'

          scm {
            url 'https://github.com/googleapis/api-common-java'
            connection 'scm:git:https://github.com/googleapis/api-common-java.git'
          }

          licenses {
            license {
              name 'BSD'
              url 'https://github.com/googleapis/api-common-java/blob/master/LICENSE'
            }
          }

          developers {
            developer {
              id 'GoogleAPIs'
              name 'GoogleAPIs'
              email 'googleapis@googlegroups.com'
              url 'https://github.com/googleapis'
              organization 'Google, Inc.'
              organizationUrl 'https://www.google.com'
            }
          }
        }
      }
    }
  }
}

// Formatting tasks
// ================

task verifyLicense << {
  def licenseText = new File(rootProject.rootDir, 'license-header-javadoc.txt').text
  def srcFiles = []
  sourceSets
      .collectMany{it.allJava.getSrcDirs()}
      .each{it.eachFileRecurse(FileType.FILES, {srcFiles << new Tuple(it, it.text)})}
  srcFiles = srcFiles
      .findAll{it.get(0).path.endsWith(".java")}
      .collect{new Tuple(it.get(0), it.get(1).replaceAll("Copyright 20[0-9]{2}", "Copyright 20xx"))}
      .findAll{!it.get(1).startsWith(licenseText)}
  if (srcFiles.asList().size() > 0) {
    srcFiles.each({println 'missing license: ' + it.get(0)})
    throw new IllegalStateException("Above files do not have licenses")
  }
}
test.dependsOn verifyLicense

googleJavaFormat {
  toolVersion '1.0'
}
tasks.googleJavaFormat {
  exclude '.apt_generated/**'
  exclude 'bin/**'
  exclude 'build/**'
}
tasks.verifyGoogleJavaFormat {
  exclude '.apt_generated/**'
  exclude 'bin/**'
  exclude 'build/**'
}
test.dependsOn verifyGoogleJavaFormat

// Release
// =======

task checkOutGhPages {
  if (!new File('tmp_gh-pages').exists()) {
    exec {
      commandLine 'git', 'clone', '--branch', 'gh-pages',
          '--single-branch', 'https://github.com/googleapis/api-common-java/', 'tmp_gh-pages'
    }
  }
}

task copyFilesToGhPages {
  dependsOn 'checkOutGhPages'
  dependsOn 'javadoc'
  doLast {
    def newSiteDirPath = 'tmp_gh-pages/' + project.version + '/apidocs/'
    new File(newSiteDirPath).mkdirs()
    copy {
      from 'build/docs/javadoc'
      into newSiteDirPath
    }
    copy {
      from 'README.md'
      into 'tmp_gh-pages'
      rename { filename -> filename.replace 'README', 'index' }
    }
  }
}

task createApiDocsRedirect {
  dependsOn 'copyFilesToGhPages'
  doLast {
    def template = new File('templates/apidocs_index.html.template').text
    def outputContent = template.replace('{{siteVersion}}', project.version)
    new File('tmp_gh-pages/apidocs/index.html').write(outputContent)
  }
}

// Regenerates the gh-pages branch under tmp_gh-pages, which must be committed separately
task updateDocsWithCurrentVersion {
  dependsOn 'createApiDocsRedirect'
}
